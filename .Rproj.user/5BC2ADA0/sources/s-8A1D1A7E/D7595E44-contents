#--------------------------------#
num_replications = 1; sires = 100; dpsire = 20; rhoG = 0;
rhoE = 0; SigG.g = 4; SigG.f = 4; SigE.g = 1; SigE.f = 1; 
group_size = 10; seed = 242;
#allocation_type = "random"

size.family =  dpsire   # tamanho da família 
ng.family=dpsire/((1/3)*group_size)    # número de grupos por família 
n.family = sires

ng.block = ng.family*(ng.family-1)   # n?mero de grupos por bloco 
nf.block = 2*ng.family + 1    # número de famílias por bloco 
n.blocks = (sires*dpsire)/(ng.block*group_size)   # número de blocos 
allocation_type = "3FAM"
#--------------------------------#

set.seed(1234)

#-------------------#
# Gerando os 'Pais' #
#-------------------#

pai <- rep(NA, n.family*size.family)

k<-1
for (j in 1:n.family) {
  pai[seq(k,k+(size.family-1),1)] <- rep(j, size.family)
  k <- k+size.family
}


pai 

#-------------------------------------------#
# Gerando as 'Maes' para cada um dos 'Pais' #
#-------------------------------------------#

mae <- rep(NA, n.family*size.family)

i <-1
for(p in 1:n.family){
  for (m in 1:size.family) {
    mae[i] <- paste(paste("mae", m, sep = ""), p, sep = "_pai")
    i <- i+1
  }
}

mae

pais <- as.data.frame(cbind(pai, mae))

head(pais)

#----------------------------------#
# Gerando um filho para cada 'Mae' # 
# Meio-irmãos                      #
#----------------------------------#

filhos <- rep(NA, n.family*size.family)

nf <- 1
for (f in 1:(n.family*size.family)) {
  filhos[f] <- paste(paste("filho", nf, sep = ""), mae[f], sep = "")
  
  if (nf == size.family){
    nf <- 1
  }else{
    nf <- nf+1
  }
}

filhos


familia <- as.data.frame(cbind(pais, filhos))
head(familia)

#--------------------------------------------------------#
# Inserinfo a Variável 'groups' no dataset               #
# Esta variável será determinada pelo algoritmo a seguir #
#--------------------------------------------------------#

familia$groups <- rep(NA, n.family*size.family)


#----------------------------------#
# FORMAR BLOCKS                    #
# 100/6 = 20                       #
# Gerando os Grupos Aleatóriamente #
# após definidos os blocos         #
#----------------------------------#

for (block in 1:ceiling(n.blocks)) {
  
  #block <- 1
  # Identificando o range dos pais
  p1 <- nf.block*(block-1) +1 
  p2 <- nf.block*block
  
  fam <- as.numeric(familia[familia$pai %in% seq(p1, p2), "pai"])
  max_fam <- max(fam)
  min_fam <- min(fam)
  
  # Criando combinações de familias
  comb_pais <- combn(seq(min_fam, max_fam, 1), 3)
  
  # Seleção aleatoria para cada grupo
  for (jj in 1:ncol(comb_pais)) {
    combinacao <- comb_pais[, jj]
    #combinacao <- comb_pais[, 1]
    
    n_sample <- min(nrow(familia[familia$pai == combinacao[1] & is.na(familia$groups), ]), ng.family)
    
    indiv1 <- sample(rownames(familia[familia$pai == combinacao[1] & is.na(familia$groups), ]), n_sample, replace = F)
    indiv2 <- sample(rownames(familia[familia$pai == combinacao[2] & is.na(familia$groups), ]), n_sample, replace = F)
    indiv3 <- sample(rownames(familia[familia$pai == combinacao[3] & is.na(familia$groups), ]), n_sample, replace = F)
    
    familia[c(indiv1, indiv2, indiv3), "groups"] <- 
      paste(paste(combinacao[1], combinacao[2], sep = "|"), combinacao[3], sep = "|")
    
  }
}